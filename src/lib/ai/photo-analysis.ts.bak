import { openai, OPENAI_MODELS } from '@/lib/openai'

export interface PhotoAnalysis {
  child: {
    age: string
    gender: string
    appearance: string
    clothing: string
    expression: string
  }
  setting: {
    location: string
    background: string
    lighting: string
    objects: string[]
  }
  composition: {
    pose: string
    perspective: string
    focus: string
  }
  suggestions: {
    coloringComplexity: 'simple' | 'medium' | 'complex'
    recommendedElements: string[]
  }
}

export async function analyzePhoto(imageBase64: string): Promise<PhotoAnalysis> {
  try {
    const response = await openai.chat.completions.create({
      model: OPENAI_MODELS.VISION,
      messages: [
        {
          role: 'system',
          content: `You are an expert AI assistant specializing in analyzing photos to create accurate, personalized coloring book pages.

Analyze the uploaded photo meticulously and generate a highly detailed JSON report that captures precise details about the primary child in the photo:

- Child:
  - Precise estimated age (number)
  - Clear gender (boy/girl)
  - Detailed appearance (hair style and length, facial features, notable accessories)
  - Detailed clothing description (colors, patterns, type)
  - Exact facial expression (happy, laughing, serious, etc.)
  - Explicit objects visible in the background and foreground

- Composition:
  - Clear description of pose (sitting, standing, holding object, etc.)
  - Precise perspective (close-up, mid-distance, full-body, upper torso)
  - Clear focus point (child's face, entire body, etc.)
  
Return ONLY a JSON object matching this structure explicitly without any additional text or commentary.`
        },
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: 'Please analyze this photo of a child and provide detailed information for creating a personalized coloring page. Return the analysis as a JSON object with the structure: { child: { age, gender, appearance, clothing, expression }, setting: { location, background, lighting, objects }, composition: { pose, perspective, focus } }'
            },
            {
              type: 'image_url',
              image_url: {
                url: `data:image/jpeg;base64,${imageBase64}`,
                detail: 'high'
              }
            }
          ]
        }
      ],
      max_tokens: 1000,
      temperature: 0.3,
    })

    const content = response.choices[0]?.message?.content
    if (!content) {
      throw new Error('No analysis received from OpenAI')
    }

    // Parse the JSON response
    try {
      const analysis = JSON.parse(content) as PhotoAnalysis
      return analysis
    } catch (parseError) {
      console.error('Failed to parse OpenAI response:', content)
      // Fallback analysis if JSON parsing fails
      return {
        child: {
          age: '6-8 years old',
          gender: 'child',
          appearance: 'young child with shoulder-length hair, bright eyes, and a warm smile',
          clothing: 'colorful casual outfit with comfortable play clothes',
          expression: 'happy and cheerful with a genuine smile'
        },
        setting: {
          location: 'indoor family setting',
          background: 'simple home environment with natural lighting',
          lighting: 'soft natural lighting from window',
          objects: ['toys', 'furniture', 'household items']
        },
        composition: {
          pose: 'standing in a natural, relaxed position',
          perspective: 'mid-distance shot showing full body',
          focus: 'centered on child with clear view of face and clothing'
        },
        suggestions: {
          coloringComplexity: 'medium',
          recommendedElements: ['flowers', 'butterflies', 'rainbow', 'clouds', 'stars']
        }
      }
    }
  } catch (error) {
    console.error('Photo analysis failed:', error)
    throw new Error('Failed to analyze photo. Please try again.')
  }
}

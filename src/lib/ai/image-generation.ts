import { openai, OPENAI_MODELS } from '@/lib/openai'

export interface GenerationResult {
  imageUrl: string
  prompt: string
  revisedPrompt?: string
}

export async function generateColoringPage(prompt: string): Promise<GenerationResult> {
  try {
    console.log('üé® Starting gpt-image-1 generation...')
    console.log('üìù Prompt:', prompt.substring(0, 200) + '...')

    const response = await openai.images.generate({
      model: OPENAI_MODELS.ImageGen,
      prompt: prompt,
      n: 1,
      size: '1024x1024'
      // gpt-image-1 returns base64 by default, no response_format parameter needed
    })

    const imageData = response.data?.[0]
    if (!imageData?.b64_json) {
      throw new Error('No image generated by gpt-image-1')
    }

    // Convert base64 to data URL for compatibility
    const imageUrl = `data:image/png;base64,${imageData.b64_json}`

    console.log('‚úÖ gpt-image-1 generation successful')
    console.log('üì∏ Image generated as base64 data')

    return {
      imageUrl: imageUrl,
      prompt: prompt,
      revisedPrompt: imageData.revised_prompt
    }
  } catch (error: any) {
    console.error('‚ùå gpt-image-1 generation failed:', error)
    
    // Handle specific OpenAI errors
    if (error?.error?.code === 'content_policy_violation') {
      throw new Error('Content not suitable for generation. Please try a different scene description.')
    }
    
    if (error?.error?.code === 'rate_limit_exceeded') {
      throw new Error('Too many requests. Please wait a moment and try again.')
    }
    
    if (error?.error?.code === 'insufficient_quota') {
      throw new Error('OpenAI quota exceeded. Please contact support.')
    }

    throw new Error('Failed to generate coloring page. Please try again.')
  }
}

export async function downloadImage(imageUrl: string): Promise<Buffer> {
  try {
    console.log('üì• Processing generated image...')
    
    // Handle data URLs (base64) from gpt-image-1
    if (imageUrl.startsWith('data:image/')) {
      const base64Data = imageUrl.split(',')[1]
      const buffer = Buffer.from(base64Data, 'base64')
      console.log('‚úÖ Image processed from base64 data')
      return buffer
    }
    
    // Handle regular URLs (fallback for other models)
    const response = await fetch(imageUrl)
    if (!response.ok) {
      throw new Error(`Failed to download image: ${response.statusText}`)
    }

    const buffer = Buffer.from(await response.arrayBuffer())
    console.log('‚úÖ Image downloaded successfully')
    
    return buffer
  } catch (error) {
    console.error('‚ùå Image processing failed:', error)
    throw new Error('Failed to process generated image')
  }
}

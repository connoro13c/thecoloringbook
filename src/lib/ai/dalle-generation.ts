import { openai, OPENAI_MODELS } from '@/lib/openai'

export interface GenerationResult {
  imageUrl: string
  prompt: string
  revisedPrompt?: string
}

export async function generateColoringPage(prompt: string): Promise<GenerationResult> {
  try {
    console.log('üé® Starting DALL-E 3 generation...')
    console.log('üìù Prompt:', prompt.substring(0, 200) + '...')

    const response = await openai.images.generate({
      model: OPENAI_MODELS.DALLE,
      prompt: prompt,
      n: 1,
      size: '1024x1024',
      quality: 'hd',
      style: 'natural', // More suitable for line art than 'vivid'
      response_format: 'url'
    })

    const imageData = response.data[0]
    if (!imageData?.url) {
      throw new Error('No image generated by DALL-E')
    }

    console.log('‚úÖ DALL-E 3 generation successful')
    console.log('üîó Image URL:', imageData.url)

    return {
      imageUrl: imageData.url,
      prompt: prompt,
      revisedPrompt: imageData.revised_prompt
    }
  } catch (error: any) {
    console.error('‚ùå DALL-E generation failed:', error)
    
    // Handle specific OpenAI errors
    if (error?.error?.code === 'content_policy_violation') {
      throw new Error('Content not suitable for generation. Please try a different scene description.')
    }
    
    if (error?.error?.code === 'rate_limit_exceeded') {
      throw new Error('Too many requests. Please wait a moment and try again.')
    }
    
    if (error?.error?.code === 'insufficient_quota') {
      throw new Error('OpenAI quota exceeded. Please contact support.')
    }

    throw new Error('Failed to generate coloring page. Please try again.')
  }
}

export async function downloadImage(imageUrl: string): Promise<Buffer> {
  try {
    console.log('üì• Downloading generated image...')
    
    const response = await fetch(imageUrl)
    if (!response.ok) {
      throw new Error(`Failed to download image: ${response.statusText}`)
    }

    const buffer = Buffer.from(await response.arrayBuffer())
    console.log('‚úÖ Image downloaded successfully')
    
    return buffer
  } catch (error) {
    console.error('‚ùå Image download failed:', error)
    throw new Error('Failed to download generated image')
  }
}
